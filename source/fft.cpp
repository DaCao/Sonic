//   fft.cpp - impelementation of class
//   of fast Fourier transform - FFT
//
//   The code is property of LIBROW
//   You can use it on your own
//   When utilizing credit LIBROW site

//     modified by Da Cao, Oct.1st/2014.
//     Changed into a FHT method to compute DFT

#include <fstream>
#include <iostream>
#include <math.h>
#include "../include/fft.h"
//#include "../include/complex.h"

#include <cmath>

//#include "revbinpermute.h"
#include "../include/fhtloc2.h"
#include "../include/fht.h"
#include "../include/cmult.h"
#include "../include/constants.h"
#include "../include/fxttypes.h"
#include "../include/complextype.h"



using namespace std;

//Convolution function which returns the frequency representation of the result.
//NFFT is the FFT size, nSIG is the size for the input, NFIL is the size of the filter.





//fft_dit4_core_p1  define method
// trig data used in method

void
fft8_dit_core_p1(double *fr, double *fi)
// 8-point decimation in time FFT
// isign = +1
// input data must be in revbin_permuted order
//.
// Cf. Nussbaumer p.148f
{
    // INPUT_RE:
    double t1r = fr[0] + fr[1];
    double t2r = fr[2] + fr[3];
    double t7r = t1r + t2r;
    double t3r = fr[4] - fr[5];
    double t4r = fr[4] + fr[5];
    double t5r = fr[6] + fr[7];
    double t8r = t4r + t5r;
    double t6r = fr[6] - fr[7];
    
    double m0r = t7r + t8r;
    double m1r = t7r - t8r;
    double m2r = t1r - t2r;
    double m3r = fr[0] - fr[1];
    double m4r = M_SQRT1_2 * (t3r - t6r);
    
#define m5i t6r
#define m6i t7r
#define m7i t8r
    m7i = M_SQRT1_2 * (t3r + t6r);
    m5i = t5r - t4r;
    m6i = fr[3] - fr[2];
    
    // INPUT_IM:
    double t1i = fi[0] + fi[1];
    double t2i = fi[2] + fi[3];
    double t7i = t1i + t2i;
    double t3i = fi[4] - fi[5];
    double t4i = fi[4] + fi[5];
    double t5i = fi[6] + fi[7];
    double t8i = t4i + t5i;
    double t6i = fi[6] - fi[7];
    
    double m0i = t7i + t8i;
    double m1i = t7i - t8i;
    double m2i = t1i - t2i;
    double m3i = fi[0] - fi[1];
    double m4i = M_SQRT1_2 * (t3i - t6i);
    
#define m5r t6i
#define m6r t7i
#define m7r t8i
    m7r = M_SQRT1_2 * (t3i + t6i);
    m5r = t4i - t5i;
    m6r = fi[2] - fi[3];
    
#define s1r t1r
#define s2r t2r
#define s3r t3r
#define s4r t4r
    s1r = m3r + m4r;
    s2r = m3r - m4r;
    s3r = m6r + m7r;
    s4r = m6r - m7r;
    
    // OUTPUT_RE:
    fr[0] = m0r;
    fr[7] = s1r + s3r;
    fr[6] = m2r + m5r;
    fr[5] = s2r - s4r;
    fr[4] = m1r;
    fr[3] = s2r + s4r;
    fr[2] = m2r - m5r;
    fr[1] = s1r - s3r;
    
#define s1i t1r
#define s2i t2r
#define s3i t3r
#define s4i t4r
    s1i = m3i + m4i;
    s2i = m3i - m4i;
    s3i = m6i - m7i;
    s4i = m6i + m7i;
    
    // OUTPUT_IM:
    fi[0] = m0i;
    fi[7] = s1i + s3i;
    fi[6] = m2i + m5i;
    fi[5] = s2i - s4i;
    fi[4] = m1i;
    fi[3] = s2i + s4i;
    fi[2] = m2i - m5i;
    fi[1] = s1i - s3i;
}
// -------------------------

#undef s1r
#undef s2r
#undef s3r
#undef s4r

#undef s1i
#undef s2i
#undef s3i
#undef s4i

#undef m5r
#undef m6r
#undef m7r

#undef m5i
#undef m6i
#undef m7i
// -------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////


static const ulong LX = 2;

double allTheC [340] = {1, 0.92388, 0.707107, 0.382683, 1, 0.995185, 0.980785, 0.95694, 0.92388, 0.881921, 0.83147, 0.77301, 0.707107, 0.634393, 0.55557, 0.471397, 0.382683, 0.290285, 0.19509, 0.0980171, 1, 0.999699, 0.998795, 0.99729, 0.995185, 0.99248, 0.989177, 0.985278, 0.980785, 0.975702, 0.970031, 0.963776, 0.95694, 0.949528, 0.941544, 0.932993, 0.92388, 0.91421, 0.903989, 0.893224, 0.881921, 0.870087, 0.857729, 0.844854, 0.83147, 0.817585, 0.803208, 0.788346, 0.77301, 0.757209, 0.740951, 0.724247, 0.707107, 0.689541, 0.671559, 0.653173, 0.634393, 0.615232, 0.595699, 0.575808, 0.55557, 0.534998, 0.514103, 0.492898, 0.471397, 0.449611, 0.427555, 0.405241, 0.382683, 0.359895, 0.33689, 0.313682, 0.290285, 0.266713, 0.24298, 0.219101, 0.19509, 0.170962, 0.14673, 0.122411, 0.0980171, 0.0735646, 0.0490677, 0.0245412, 1, 0.999981, 0.999925, 0.999831, 0.999699, 0.999529, 0.999322, 0.999078, 0.998795, 0.998476, 0.998118, 0.997723, 0.99729, 0.99682, 0.996313, 0.995767, 0.995185, 0.994565, 0.993907, 0.993212, 0.99248, 0.99171, 0.990903, 0.990058, 0.989177, 0.988258, 0.987301, 0.986308, 0.985278, 0.98421, 0.983105, 0.981964, 0.980785, 0.97957, 0.978317, 0.977028, 0.975702, 0.974339, 0.97294, 0.971504, 0.970031, 0.968522, 0.966976, 0.965394, 0.963776, 0.962121, 0.960431, 0.958703, 0.95694, 0.955141, 0.953306, 0.951435, 0.949528, 0.947586, 0.945607, 0.943593, 0.941544, 0.939459, 0.937339, 0.935184, 0.932993, 0.930767, 0.928506, 0.92621, 0.92388, 0.921514, 0.919114, 0.916679, 0.91421, 0.911706, 0.909168, 0.906596, 0.903989, 0.901349, 0.898674, 0.895966, 0.893224, 0.890449, 0.88764, 0.884797, 0.881921, 0.879012, 0.87607, 0.873095, 0.870087, 0.867046, 0.863973, 0.860867, 0.857729, 0.854558, 0.851355, 0.84812, 0.844854, 0.841555, 0.838225, 0.834863, 0.83147, 0.828045, 0.824589, 0.821103, 0.817585, 0.814036, 0.810457, 0.806848, 0.803208, 0.799537, 0.795837, 0.792107, 0.788346, 0.784557, 0.780737, 0.776888, 0.77301, 0.769103, 0.765167, 0.761202, 0.757209, 0.753187, 0.749136, 0.745058, 0.740951, 0.736817, 0.732654, 0.728464, 0.724247, 0.720003, 0.715731, 0.711432, 0.707107, 0.702755, 0.698376, 0.693971, 0.689541, 0.685084, 0.680601, 0.676093, 0.671559, 0.667, 0.662416, 0.657807, 0.653173, 0.648514, 0.643832, 0.639124, 0.634393, 0.629638, 0.624859, 0.620057, 0.615232, 0.610383, 0.605511, 0.600616, 0.595699, 0.59076, 0.585798, 0.580814, 0.575808, 0.570781, 0.565732, 0.560662, 0.55557, 0.550458, 0.545325, 0.540171, 0.534998, 0.529804, 0.52459, 0.519356, 0.514103, 0.50883, 0.503538, 0.498228, 0.492898, 0.48755, 0.482184, 0.476799, 0.471397, 0.465976, 0.460539, 0.455084, 0.449611, 0.444122, 0.438616, 0.433094, 0.427555, 0.422, 0.41643, 0.410843, 0.405241, 0.399624, 0.393992, 0.388345, 0.382683, 0.377007, 0.371317, 0.365613, 0.359895, 0.354164, 0.348419, 0.342661, 0.33689, 0.331106, 0.32531, 0.319502, 0.313682, 0.30785, 0.302006, 0.296151, 0.290285, 0.284408, 0.27852, 0.272621, 0.266713, 0.260794, 0.254866, 0.248928, 0.24298, 0.237024, 0.231058, 0.225084, 0.219101, 0.21311, 0.207111, 0.201105, 0.19509, 0.189069, 0.18304, 0.177004, 0.170962, 0.164913, 0.158858, 0.152797, 0.14673, 0.140658, 0.134581, 0.128498, 0.122411, 0.116319, 0.110222, 0.104122, 0.0980171, 0.091909, 0.0857973, 0.0796824, 0.0735646, 0.0674439, 0.0613207, 0.0551952, 0.0490677, 0.0429383, 0.0368072, 0.0306748, 0.0245412, 0.0184067, 0.0122715, 0.00613588};

double allTheS [340] = {0, 0.382683, 0.707107, 0.92388, 0, 0.0980171, 0.19509, 0.290285, 0.382683, 0.471397, 0.55557, 0.634393, 0.707107, 0.77301, 0.83147, 0.881921, 0.92388, 0.95694, 0.980785, 0.995185, 0, 0.0245412, 0.0490677, 0.0735646, 0.0980171, 0.122411, 0.14673, 0.170962, 0.19509, 0.219101, 0.24298, 0.266713, 0.290285, 0.313682, 0.33689, 0.359895, 0.382683, 0.405241, 0.427555, 0.449611, 0.471397, 0.492898, 0.514103, 0.534998, 0.55557, 0.575808, 0.595699, 0.615232, 0.634393, 0.653173, 0.671559, 0.689541, 0.707107, 0.724247, 0.740951, 0.757209, 0.77301, 0.788346, 0.803208, 0.817585, 0.83147, 0.844854, 0.857729, 0.870087, 0.881921, 0.893224, 0.903989, 0.91421, 0.92388, 0.932993, 0.941544, 0.949528, 0.95694, 0.963776, 0.970031, 0.975702, 0.980785, 0.985278, 0.989177, 0.99248, 0.995185, 0.99729, 0.998795, 0.999699, 0, 0.00613588, 0.0122715, 0.0184067, 0.0245412, 0.0306748, 0.0368072, 0.0429383, 0.0490677, 0.0551952, 0.0613207, 0.0674439, 0.0735646, 0.0796824, 0.0857973, 0.091909, 0.0980171, 0.104122, 0.110222, 0.116319, 0.122411, 0.128498, 0.134581, 0.140658, 0.14673, 0.152797, 0.158858, 0.164913, 0.170962, 0.177004, 0.18304, 0.189069, 0.19509, 0.201105, 0.207111, 0.21311, 0.219101, 0.225084, 0.231058, 0.237024, 0.24298, 0.248928, 0.254866, 0.260794, 0.266713, 0.272621, 0.27852, 0.284408, 0.290285, 0.296151, 0.302006, 0.30785, 0.313682, 0.319502, 0.32531, 0.331106, 0.33689, 0.342661, 0.348419, 0.354164, 0.359895, 0.365613, 0.371317, 0.377007, 0.382683, 0.388345, 0.393992, 0.399624, 0.405241, 0.410843, 0.41643, 0.422, 0.427555, 0.433094, 0.438616, 0.444122, 0.449611, 0.455084, 0.460539, 0.465976, 0.471397, 0.476799, 0.482184, 0.48755, 0.492898, 0.498228, 0.503538, 0.50883, 0.514103, 0.519356, 0.52459, 0.529804, 0.534998, 0.540171, 0.545325, 0.550458, 0.55557, 0.560662, 0.565732, 0.570781, 0.575808, 0.580814, 0.585798, 0.59076, 0.595699, 0.600616, 0.605511, 0.610383, 0.615232, 0.620057, 0.624859, 0.629638, 0.634393, 0.639124, 0.643832, 0.648514, 0.653173, 0.657807, 0.662416, 0.667, 0.671559, 0.676093, 0.680601, 0.685084, 0.689541, 0.693971, 0.698376, 0.702755, 0.707107, 0.711432, 0.715731, 0.720003, 0.724247, 0.728464, 0.732654, 0.736817, 0.740951, 0.745058, 0.749136, 0.753187, 0.757209, 0.761202, 0.765167, 0.769103, 0.77301, 0.776888, 0.780737, 0.784557, 0.788346, 0.792107, 0.795837, 0.799537, 0.803208, 0.806848, 0.810457, 0.814036, 0.817585, 0.821103, 0.824589, 0.828045, 0.83147, 0.834863, 0.838225, 0.841555, 0.844854, 0.84812, 0.851355, 0.854558, 0.857729, 0.860867, 0.863973, 0.867046, 0.870087, 0.873095, 0.87607, 0.879012, 0.881921, 0.884797, 0.88764, 0.890449, 0.893224, 0.895966, 0.898674, 0.901349, 0.903989, 0.906596, 0.909168, 0.911706, 0.91421, 0.916679, 0.919114, 0.921514, 0.92388, 0.92621, 0.928506, 0.930767, 0.932993, 0.935184, 0.937339, 0.939459, 0.941544, 0.943593, 0.945607, 0.947586, 0.949528, 0.951435, 0.953306, 0.955141, 0.95694, 0.958703, 0.960431, 0.962121, 0.963776, 0.965394, 0.966976, 0.968522, 0.970031, 0.971504, 0.97294, 0.974339, 0.975702, 0.977028, 0.978317, 0.97957, 0.980785, 0.981964, 0.983105, 0.98421, 0.985278, 0.986308, 0.987301, 0.988258, 0.989177, 0.990058, 0.990903, 0.99171, 0.99248, 0.993212, 0.993907, 0.994565, 0.995185, 0.995767, 0.996313, 0.99682, 0.99729, 0.997723, 0.998118, 0.998476, 0.998795, 0.999078, 0.999322, 0.999529, 0.999699, 0.999831, 0.999925, 0.999981};

double allTheC2 [340] = {1, 0.707107, 2.22045e-16, -0.707107, 1, 0.980785, 0.92388, 0.83147, 0.707107, 0.55557, 0.382683, 0.19509, 2.22045e-16, -0.19509, -0.382683, -0.55557, -0.707107, -0.83147, -0.92388, -0.980785, 1, 0.998795, 0.995185, 0.989177, 0.980785, 0.970031, 0.95694, 0.941544, 0.92388, 0.903989, 0.881921, 0.857729, 0.83147, 0.803208, 0.77301, 0.740951, 0.707107, 0.671559, 0.634393, 0.595699, 0.55557, 0.514103, 0.471397, 0.427555, 0.382683, 0.33689, 0.290285, 0.24298, 0.19509, 0.14673, 0.0980171, 0.0490677, -9.4369e-16, -0.0490677, -0.0980171, -0.14673, -0.19509, -0.24298, -0.290285, -0.33689, -0.382683, -0.427555, -0.471397, -0.514103, -0.55557, -0.595699, -0.634393, -0.671559, -0.707107, -0.740951, -0.77301, -0.803208, -0.83147, -0.857729, -0.881921, -0.903989, -0.92388, -0.941544, -0.95694, -0.970031, -0.980785, -0.989177, -0.995185, -0.998795, 1, 0.999925, 0.999699, 0.999322, 0.998795, 0.998118, 0.99729, 0.996313, 0.995185, 0.993907, 0.99248, 0.990903, 0.989177, 0.987301, 0.985278, 0.983105, 0.980785, 0.978317, 0.975702, 0.97294, 0.970031, 0.966976, 0.963776, 0.960431, 0.95694, 0.953306, 0.949528, 0.945607, 0.941544, 0.937339, 0.932993, 0.928506, 0.92388, 0.919114, 0.91421, 0.909168, 0.903989, 0.898674, 0.893224, 0.88764, 0.881921, 0.87607, 0.870087, 0.863973, 0.857729, 0.851355, 0.844854, 0.838225, 0.83147, 0.824589, 0.817585, 0.810457, 0.803208, 0.795837, 0.788346, 0.780737, 0.77301, 0.765167, 0.757209, 0.749136, 0.740951, 0.732654, 0.724247, 0.715731, 0.707107, 0.698376, 0.689541, 0.680601, 0.671559, 0.662416, 0.653173, 0.643832, 0.634393, 0.624859, 0.615232, 0.605511, 0.595699, 0.585798, 0.575808, 0.565732, 0.55557, 0.545325, 0.534998, 0.52459, 0.514103, 0.503538, 0.492898, 0.482184, 0.471397, 0.460539, 0.449611, 0.438616, 0.427555, 0.41643, 0.405241, 0.393992, 0.382683, 0.371317, 0.359895, 0.348419, 0.33689, 0.32531, 0.313682, 0.302006, 0.290285, 0.27852, 0.266713, 0.254866, 0.24298, 0.231058, 0.219101, 0.207111, 0.19509, 0.18304, 0.170962, 0.158858, 0.14673, 0.134581, 0.122411, 0.110222, 0.0980171, 0.0857973, 0.0735646, 0.0613207, 0.0490677, 0.0368072, 0.0245412, 0.0122715, 3.10862e-15, -0.0122715, -0.0245412, -0.0368072, -0.0490677, -0.0613207, -0.0735646, -0.0857973, -0.0980171, -0.110222, -0.122411, -0.134581, -0.14673, -0.158858, -0.170962, -0.18304, -0.19509, -0.207111, -0.219101, -0.231058, -0.24298, -0.254866, -0.266713, -0.27852, -0.290285, -0.302006, -0.313682, -0.32531, -0.33689, -0.348419, -0.359895, -0.371317, -0.382683, -0.393992, -0.405241, -0.41643, -0.427555, -0.438616, -0.449611, -0.460539, -0.471397, -0.482184, -0.492898, -0.503538, -0.514103, -0.52459, -0.534998, -0.545325, -0.55557, -0.565732, -0.575808, -0.585798, -0.595699, -0.605511, -0.615232, -0.624859, -0.634393, -0.643832, -0.653173, -0.662416, -0.671559, -0.680601, -0.689541, -0.698376, -0.707107, -0.715731, -0.724247, -0.732654, -0.740951, -0.749136, -0.757209, -0.765167, -0.77301, -0.780737, -0.788346, -0.795837, -0.803208, -0.810457, -0.817585, -0.824589, -0.83147, -0.838225, -0.844854, -0.851355, -0.857729, -0.863973, -0.870087, -0.87607, -0.881921, -0.88764, -0.893224, -0.898674, -0.903989, -0.909168, -0.91421, -0.919114, -0.92388, -0.928506, -0.932993, -0.937339, -0.941544, -0.945607, -0.949528, -0.953306, -0.95694, -0.960431, -0.963776, -0.966976, -0.970031, -0.97294, -0.975702, -0.978317, -0.980785, -0.983105, -0.985278, -0.987301, -0.989177, -0.990903, -0.99248, -0.993907, -0.995185, -0.996313, -0.99729, -0.998118, -0.998795, -0.999322, -0.999699, -0.999925};

double allTheS2 [340] = {0, 0.707107, 1, 0.707107, 0, 0.19509, 0.382683, 0.55557, 0.707107, 0.83147, 0.92388, 0.980785, 1, 0.980785, 0.92388, 0.83147, 0.707107, 0.55557, 0.382683, 0.19509, 0, 0.0490677, 0.0980171, 0.14673, 0.19509, 0.24298, 0.290285, 0.33689, 0.382683, 0.427555, 0.471397, 0.514103, 0.55557, 0.595699, 0.634393, 0.671559, 0.707107, 0.740951, 0.77301, 0.803208, 0.83147, 0.857729, 0.881921, 0.903989, 0.92388, 0.941544, 0.95694, 0.970031, 0.980785, 0.989177, 0.995185, 0.998795, 1, 0.998795, 0.995185, 0.989177, 0.980785, 0.970031, 0.95694, 0.941544, 0.92388, 0.903989, 0.881921, 0.857729, 0.83147, 0.803208, 0.77301, 0.740951, 0.707107, 0.671559, 0.634393, 0.595699, 0.55557, 0.514103, 0.471397, 0.427555, 0.382683, 0.33689, 0.290285, 0.24298, 0.19509, 0.14673, 0.0980171, 0.0490677, 0, 0.0122715, 0.0245412, 0.0368072, 0.0490677, 0.0613207, 0.0735646, 0.0857973, 0.0980171, 0.110222, 0.122411, 0.134581, 0.14673, 0.158858, 0.170962, 0.18304, 0.19509, 0.207111, 0.219101, 0.231058, 0.24298, 0.254866, 0.266713, 0.27852, 0.290285, 0.302006, 0.313682, 0.32531, 0.33689, 0.348419, 0.359895, 0.371317, 0.382683, 0.393992, 0.405241, 0.41643, 0.427555, 0.438616, 0.449611, 0.460539, 0.471397, 0.482184, 0.492898, 0.503538, 0.514103, 0.52459, 0.534998, 0.545325, 0.55557, 0.565732, 0.575808, 0.585798, 0.595699, 0.605511, 0.615232, 0.624859, 0.634393, 0.643832, 0.653173, 0.662416, 0.671559, 0.680601, 0.689541, 0.698376, 0.707107, 0.715731, 0.724247, 0.732654, 0.740951, 0.749136, 0.757209, 0.765167, 0.77301, 0.780737, 0.788346, 0.795837, 0.803208, 0.810457, 0.817585, 0.824589, 0.83147, 0.838225, 0.844854, 0.851355, 0.857729, 0.863973, 0.870087, 0.87607, 0.881921, 0.88764, 0.893224, 0.898674, 0.903989, 0.909168, 0.91421, 0.919114, 0.92388, 0.928506, 0.932993, 0.937339, 0.941544, 0.945607, 0.949528, 0.953306, 0.95694, 0.960431, 0.963776, 0.966976, 0.970031, 0.97294, 0.975702, 0.978317, 0.980785, 0.983105, 0.985278, 0.987301, 0.989177, 0.990903, 0.99248, 0.993907, 0.995185, 0.996313, 0.99729, 0.998118, 0.998795, 0.999322, 0.999699, 0.999925, 1, 0.999925, 0.999699, 0.999322, 0.998795, 0.998118, 0.99729, 0.996313, 0.995185, 0.993907, 0.99248, 0.990903, 0.989177, 0.987301, 0.985278, 0.983105, 0.980785, 0.978317, 0.975702, 0.97294, 0.970031, 0.966976, 0.963776, 0.960431, 0.95694, 0.953306, 0.949528, 0.945607, 0.941544, 0.937339, 0.932993, 0.928506, 0.92388, 0.919114, 0.91421, 0.909168, 0.903989, 0.898674, 0.893224, 0.88764, 0.881921, 0.87607, 0.870087, 0.863973, 0.857729, 0.851355, 0.844854, 0.838225, 0.83147, 0.824589, 0.817585, 0.810457, 0.803208, 0.795837, 0.788346, 0.780737, 0.77301, 0.765167, 0.757209, 0.749136, 0.740951, 0.732654, 0.724247, 0.715731, 0.707107, 0.698376, 0.689541, 0.680601, 0.671559, 0.662416, 0.653173, 0.643832, 0.634393, 0.624859, 0.615232, 0.605511, 0.595699, 0.585798, 0.575808, 0.565732, 0.55557, 0.545325, 0.534998, 0.52459, 0.514103, 0.503538, 0.492898, 0.482184, 0.471397, 0.460539, 0.449611, 0.438616, 0.427555, 0.41643, 0.405241, 0.393992, 0.382683, 0.371317, 0.359895, 0.348419, 0.33689, 0.32531, 0.313682, 0.302006, 0.290285, 0.27852, 0.266713, 0.254866, 0.24298, 0.231058, 0.219101, 0.207111, 0.19509, 0.18304, 0.170962, 0.158858, 0.14673, 0.134581, 0.122411, 0.110222, 0.0980171, 0.0857973, 0.0735646, 0.0613207, 0.0490677, 0.0368072, 0.0245412, 0.0122715};

double allTheC3 [340] = {1, 0.382683, -0.707107, -0.92388, 1, 0.95694, 0.83147, 0.634393, 0.382683, 0.0980171, -0.19509, -0.471397, -0.707107, -0.881921, -0.980785, -0.995185, -0.92388, -0.77301, -0.55557, -0.290285, 1, 0.99729, 0.989177, 0.975702, 0.95694, 0.932993, 0.903989, 0.870087, 0.83147, 0.788346, 0.740951, 0.689541, 0.634393, 0.575808, 0.514103, 0.449611, 0.382683, 0.313682, 0.24298, 0.170962, 0.0980171, 0.0245412, -0.0490677, -0.122411, -0.19509, -0.266713, -0.33689, -0.405241, -0.471397, -0.534998, -0.595699, -0.653173, -0.707107, -0.757209, -0.803208, -0.844854, -0.881921, -0.91421, -0.941544, -0.963776, -0.980785, -0.99248, -0.998795, -0.999699, -0.995185, -0.985278, -0.970031, -0.949528, -0.92388, -0.893224, -0.857729, -0.817585, -0.77301, -0.724247, -0.671559, -0.615232, -0.55557, -0.492898, -0.427555, -0.359895, -0.290285, -0.219101, -0.14673, -0.0735646, 1, 0.999831, 0.999322, 0.998476, 0.99729, 0.995767, 0.993907, 0.99171, 0.989177, 0.986308, 0.983105, 0.97957, 0.975702, 0.971504, 0.966976, 0.962121, 0.95694, 0.951435, 0.945607, 0.939459, 0.932993, 0.92621, 0.919114, 0.911706, 0.903989, 0.895966, 0.88764, 0.879012, 0.870087, 0.860867, 0.851355, 0.841555, 0.83147, 0.821103, 0.810457, 0.799537, 0.788346, 0.776888, 0.765167, 0.753187, 0.740951, 0.728464, 0.715731, 0.702755, 0.689541, 0.676093, 0.662416, 0.648514, 0.634393, 0.620057, 0.605511, 0.59076, 0.575808, 0.560662, 0.545325, 0.529804, 0.514103, 0.498228, 0.482184, 0.465976, 0.449611, 0.433094, 0.41643, 0.399624, 0.382683, 0.365613, 0.348419, 0.331106, 0.313682, 0.296151, 0.27852, 0.260794, 0.24298, 0.225084, 0.207111, 0.189069, 0.170962, 0.152797, 0.134581, 0.116319, 0.0980171, 0.0796824, 0.0613207, 0.0429383, 0.0245412, 0.00613588, -0.0122715, -0.0306748, -0.0490677, -0.0674439, -0.0857973, -0.104122, -0.122411, -0.140658, -0.158858, -0.177004, -0.19509, -0.21311, -0.231058, -0.248928, -0.266713, -0.284408, -0.302006, -0.319502, -0.33689, -0.354164, -0.371317, -0.388345, -0.405241, -0.422, -0.438616, -0.455084, -0.471397, -0.48755, -0.503538, -0.519356, -0.534998, -0.550458, -0.565732, -0.580814, -0.595699, -0.610383, -0.624859, -0.639124, -0.653173, -0.667, -0.680601, -0.693971, -0.707107, -0.720003, -0.732654, -0.745058, -0.757209, -0.769103, -0.780737, -0.792107, -0.803208, -0.814036, -0.824589, -0.834863, -0.844854, -0.854558, -0.863973, -0.873095, -0.881921, -0.890449, -0.898674, -0.906596, -0.91421, -0.921514, -0.928506, -0.935184, -0.941544, -0.947586, -0.953306, -0.958703, -0.963776, -0.968522, -0.97294, -0.977028, -0.980785, -0.98421, -0.987301, -0.990058, -0.99248, -0.994565, -0.996313, -0.997723, -0.998795, -0.999529, -0.999925, -0.999981, -0.999699, -0.999078, -0.998118, -0.99682, -0.995185, -0.993212, -0.990903, -0.988258, -0.985278, -0.981964, -0.978317, -0.974339, -0.970031, -0.965394, -0.960431, -0.955141, -0.949528, -0.943593, -0.937339, -0.930767, -0.92388, -0.916679, -0.909168, -0.901349, -0.893224, -0.884797, -0.87607, -0.867046, -0.857729, -0.84812, -0.838225, -0.828045, -0.817585, -0.806848, -0.795837, -0.784557, -0.77301, -0.761202, -0.749136, -0.736817, -0.724247, -0.711432, -0.698376, -0.685084, -0.671559, -0.657807, -0.643832, -0.629638, -0.615232, -0.600616, -0.585798, -0.570781, -0.55557, -0.540171, -0.52459, -0.50883, -0.492898, -0.476799, -0.460539, -0.444122, -0.427555, -0.410843, -0.393992, -0.377007, -0.359895, -0.342661, -0.32531, -0.30785, -0.290285, -0.272621, -0.254866, -0.237024, -0.219101, -0.201105, -0.18304, -0.164913, -0.14673, -0.128498, -0.110222, -0.091909, -0.0735646, -0.0551952, -0.0368072, -0.0184067};

double allTheS3 [340] = {0, 0.92388, 0.707107, -0.382683, 0, 0.290285, 0.55557, 0.77301, 0.92388, 0.995185, 0.980785, 0.881921, 0.707107, 0.471397, 0.19509, -0.0980171, -0.382683, -0.634393, -0.83147, -0.95694, 0, 0.0735646, 0.14673, 0.219101, 0.290285, 0.359895, 0.427555, 0.492898, 0.55557, 0.615232, 0.671559, 0.724247, 0.77301, 0.817585, 0.857729, 0.893224, 0.92388, 0.949528, 0.970031, 0.985278, 0.995185, 0.999699, 0.998795, 0.99248, 0.980785, 0.963776, 0.941544, 0.91421, 0.881921, 0.844854, 0.803208, 0.757209, 0.707107, 0.653173, 0.595699, 0.534998, 0.471397, 0.405241, 0.33689, 0.266713, 0.19509, 0.122411, 0.0490677, -0.0245412, -0.0980171, -0.170962, -0.24298, -0.313682, -0.382683, -0.449611, -0.514103, -0.575808, -0.634393, -0.689541, -0.740951, -0.788346, -0.83147, -0.870087, -0.903989, -0.932993, -0.95694, -0.975702, -0.989177, -0.99729, 0, 0.0184067, 0.0368072, 0.0551952, 0.0735646, 0.091909, 0.110222, 0.128498, 0.14673, 0.164913, 0.18304, 0.201105, 0.219101, 0.237024, 0.254866, 0.272621, 0.290285, 0.30785, 0.32531, 0.342661, 0.359895, 0.377007, 0.393992, 0.410843, 0.427555, 0.444122, 0.460539, 0.476799, 0.492898, 0.50883, 0.52459, 0.540171, 0.55557, 0.570781, 0.585798, 0.600616, 0.615232, 0.629638, 0.643832, 0.657807, 0.671559, 0.685084, 0.698376, 0.711432, 0.724247, 0.736817, 0.749136, 0.761202, 0.77301, 0.784557, 0.795837, 0.806848, 0.817585, 0.828045, 0.838225, 0.84812, 0.857729, 0.867046, 0.87607, 0.884797, 0.893224, 0.901349, 0.909168, 0.916679, 0.92388, 0.930767, 0.937339, 0.943593, 0.949528, 0.955141, 0.960431, 0.965394, 0.970031, 0.974339, 0.978317, 0.981964, 0.985278, 0.988258, 0.990903, 0.993212, 0.995185, 0.99682, 0.998118, 0.999078, 0.999699, 0.999981, 0.999925, 0.999529, 0.998795, 0.997723, 0.996313, 0.994565, 0.99248, 0.990058, 0.987301, 0.98421, 0.980785, 0.977028, 0.97294, 0.968522, 0.963776, 0.958703, 0.953306, 0.947586, 0.941544, 0.935184, 0.928506, 0.921514, 0.91421, 0.906596, 0.898674, 0.890449, 0.881921, 0.873095, 0.863973, 0.854558, 0.844854, 0.834863, 0.824589, 0.814036, 0.803208, 0.792107, 0.780737, 0.769103, 0.757209, 0.745058, 0.732654, 0.720003, 0.707107, 0.693971, 0.680601, 0.667, 0.653173, 0.639124, 0.624859, 0.610383, 0.595699, 0.580814, 0.565732, 0.550458, 0.534998, 0.519356, 0.503538, 0.48755, 0.471397, 0.455084, 0.438616, 0.422, 0.405241, 0.388345, 0.371317, 0.354164, 0.33689, 0.319502, 0.302006, 0.284408, 0.266713, 0.248928, 0.231058, 0.21311, 0.19509, 0.177004, 0.158858, 0.140658, 0.122411, 0.104122, 0.0857973, 0.0674439, 0.0490677, 0.0306748, 0.0122715, -0.00613588, -0.0245412, -0.0429383, -0.0613207, -0.0796824, -0.0980171, -0.116319, -0.134581, -0.152797, -0.170962, -0.189069, -0.207111, -0.225084, -0.24298, -0.260794, -0.27852, -0.296151, -0.313682, -0.331106, -0.348419, -0.365613, -0.382683, -0.399624, -0.41643, -0.433094, -0.449611, -0.465976, -0.482184, -0.498228, -0.514103, -0.529804, -0.545325, -0.560662, -0.575808, -0.59076, -0.605511, -0.620057, -0.634393, -0.648514, -0.662416, -0.676093, -0.689541, -0.702755, -0.715731, -0.728464, -0.740951, -0.753187, -0.765167, -0.776888, -0.788346, -0.799537, -0.810457, -0.821103, -0.83147, -0.841555, -0.851355, -0.860867, -0.870087, -0.879012, -0.88764, -0.895966, -0.903989, -0.911706, -0.919114, -0.92621, -0.932993, -0.939459, -0.945607, -0.951435, -0.95694, -0.962121, -0.966976, -0.971504, -0.975702, -0.97957, -0.983105, -0.986308, -0.989177, -0.99171, -0.993907, -0.995767, -0.99729, -0.998476, -0.999322, -0.999831};



void
fft_dit4_core_p1(double *fr, double *fi, ulong ldn)
// Auxiliary routine for fft_dit4()
// Decimation in time (DIT) radix-4 FFT
// Input data must be in revbin_permuted order
// ldn := base-2 logarithm of the array length
// Fixed isign = +1
{
    int tmp = 0;// for getting the precalculated cos and sin
    
    const ulong n = (1UL<<ldn);
    
    if ( n<=2 )
    {
        if ( n==2 )
        {
            sumdiff(fr[0], fr[1]);
            sumdiff(fi[0], fi[1]);
        }
        return;
    }
    
    
    ulong ldm = (ldn&1);
    if ( ldm!=0 )  // n is not a power of 4, need a radix-8 step
    {
        for (ulong i0=0; i0<n; i0+=8)  fft8_dit_core_p1(fr+i0, fi+i0);
    }
    else
    {
        for (ulong i0=0; i0<n; i0+=4)
        {
            double xr, yr, ur, vr, xi, yi, ui, vi;
            ulong i1 = i0 + 1;
            ulong i2 = i1 + 1;
            ulong i3 = i2 + 1;
            
            sumdiff(fr[i0], fr[i1], xr, ur);
            sumdiff(fr[i2], fr[i3], yr, vi);
            sumdiff(fi[i0], fi[i1], xi, ui);
            sumdiff(fi[i3], fi[i2], yi, vr);
            
            sumdiff(ui, vi, fi[i1], fi[i3]);
            sumdiff(xi, yi, fi[i0], fi[i2]);
            sumdiff(ur, vr, fr[i1], fr[i3]);
            sumdiff(xr, yr, fr[i0], fr[i2]);
        }
    }
    ldm += 2*LX;
    
    
    for ( ; ldm<=ldn; ldm+=LX)
    {
        ulong m = (1UL<<ldm);
        ulong m4 = (m>>LX);
        
        for (ulong j=0; j<m4; j++)
        {
            double c, s, c2, s2, c3, s3;
            c = allTheC[tmp];
            s = allTheS[tmp];
            c2 = allTheC2[tmp];
            s2 = allTheS2[tmp];
            c3 = allTheC3[tmp];
            s3 = allTheS3[tmp];
            tmp = tmp + 1;
            
            for (ulong r=0; r<n; r+=m)
            {
                ulong i0 = j + r;
                ulong i1 = i0 + m4;
                ulong i2 = i1 + m4;
                ulong i3 = i2 + m4;
                
                double xr, yr, ur, vr, xi, yi, ui, vi;
                cmult(c2, s2, fr[i1], fi[i1], xr, xi);
                
                sumdiff3_r(xr, fr[i0], ur);
                sumdiff3_r(xi, fi[i0], ui);
                
                cmult(c,  s,  fr[i2], fi[i2], yr, vr);
                cmult(c3, s3, fr[i3], fi[i3], vi, yi);
                
                sumdiff(yr, vi);
                sumdiff(yi, vr);
                
                sumdiff(ur, vr, fr[i1], fr[i3]);
                sumdiff(ui, vi, fi[i1], fi[i3]);
                sumdiff(xr, yr, fr[i0], fr[i2]);
                sumdiff(xi, yi, fi[i0], fi[i2]);
            }
        }
    }
}
// -------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////


// store all the precalculated indexes in the array
int PermutedIndex [1024] = {0, 512, 256, 768, 128, 640, 384, 896, 64, 576, 320, 832, 192, 704, 448, 960, 32, 544, 288, 800, 160, 672, 416, 928, 96, 608, 352, 864, 224, 736, 480, 992, 16, 528, 272, 784, 144, 656, 400, 912, 80, 592, 336, 848, 208, 720, 464, 976, 48, 560, 304, 816, 176, 688, 432, 944, 112, 624, 368, 880, 240, 752, 496, 1008, 8, 520, 264, 776, 136, 648, 392, 904, 72, 584, 328, 840, 200, 712, 456, 968, 40, 552, 296, 808, 168, 680, 424, 936, 104, 616, 360, 872, 232, 744, 488, 1000, 24, 536, 280, 792, 152, 664, 408, 920, 88, 600, 344, 856, 216, 728, 472, 984, 56, 568, 312, 824, 184, 696, 440, 952, 120, 632, 376, 888, 248, 760, 504, 1016, 4, 516, 260, 772, 132, 644, 388, 900, 68, 580, 324, 836, 196, 708, 452, 964, 36, 548, 292, 804, 164, 676, 420, 932, 100, 612, 356, 868, 228, 740, 484, 996, 20, 532, 276, 788, 148, 660, 404, 916, 84, 596, 340, 852, 212, 724, 468, 980, 52, 564, 308, 820, 180, 692, 436, 948, 116, 628, 372, 884, 244, 756, 500, 1012, 12, 524, 268, 780, 140, 652, 396, 908, 76, 588, 332, 844, 204, 716, 460, 972, 44, 556, 300, 812, 172, 684, 428, 940, 108, 620, 364, 876, 236, 748, 492, 1004, 28, 540, 284, 796, 156, 668, 412, 924, 92, 604, 348, 860, 220, 732, 476, 988, 60, 572, 316, 828, 188, 700, 444, 956, 124, 636, 380, 892, 252, 764, 508, 1020, 2, 514, 258, 770, 130, 642, 386, 898, 66, 578, 322, 834, 194, 706, 450, 962, 34, 546, 290, 802, 162, 674, 418, 930, 98, 610, 354, 866, 226, 738, 482, 994, 18, 530, 274, 786, 146, 658, 402, 914, 82, 594, 338, 850, 210, 722, 466, 978, 50, 562, 306, 818, 178, 690, 434, 946, 114, 626, 370, 882, 242, 754, 498, 1010, 10, 522, 266, 778, 138, 650, 394, 906, 74, 586, 330, 842, 202, 714, 458, 970, 42, 554, 298, 810, 170, 682, 426, 938, 106, 618, 362, 874, 234, 746, 490, 1002, 26, 538, 282, 794, 154, 666, 410, 922, 90, 602, 346, 858, 218, 730, 474, 986, 58, 570, 314, 826, 186, 698, 442, 954, 122, 634, 378, 890, 250, 762, 506, 1018, 6, 518, 262, 774, 134, 646, 390, 902, 70, 582, 326, 838, 198, 710, 454, 966, 38, 550, 294, 806, 166, 678, 422, 934, 102, 614, 358, 870, 230, 742, 486, 998, 22, 534, 278, 790, 150, 662, 406, 918, 86, 598, 342, 854, 214, 726, 470, 982, 54, 566, 310, 822, 182, 694, 438, 950, 118, 630, 374, 886, 246, 758, 502, 1014, 14, 526, 270, 782, 142, 654, 398, 910, 78, 590, 334, 846, 206, 718, 462, 974, 46, 558, 302, 814, 174, 686, 430, 942, 110, 622, 366, 878, 238, 750, 494, 1006, 30, 542, 286, 798, 158, 670, 414, 926, 94, 606, 350, 862, 222, 734, 478, 990, 62, 574, 318, 830, 190, 702, 446, 958, 126, 638, 382, 894, 254, 766, 510, 1022, 1, 513, 257, 769, 129, 641, 385, 897, 65, 577, 321, 833, 193, 705, 449, 961, 33, 545, 289, 801, 161, 673, 417, 929, 97, 609, 353, 865, 225, 737, 481, 993, 17, 529, 273, 785, 145, 657, 401, 913, 81, 593, 337, 849, 209, 721, 465, 977, 49, 561, 305, 817, 177, 689, 433, 945, 113, 625, 369, 881, 241, 753, 497, 1009, 9, 521, 265, 777, 137, 649, 393, 905, 73, 585, 329, 841, 201, 713, 457, 969, 41, 553, 297, 809, 169, 681, 425, 937, 105, 617, 361, 873, 233, 745, 489, 1001, 25, 537, 281, 793, 153, 665, 409, 921, 89, 601, 345, 857, 217, 729, 473, 985, 57, 569, 313, 825, 185, 697, 441, 953, 121, 633, 377, 889, 249, 761, 505, 1017, 5, 517, 261, 773, 133, 645, 389, 901, 69, 581, 325, 837, 197, 709, 453, 965, 37, 549, 293, 805, 165, 677, 421, 933, 101, 613, 357, 869, 229, 741, 485, 997, 21, 533, 277, 789, 149, 661, 405, 917, 85, 597, 341, 853, 213, 725, 469, 981, 53, 565, 309, 821, 181, 693, 437, 949, 117, 629, 373, 885, 245, 757, 501, 1013, 13, 525, 269, 781, 141, 653, 397, 909, 77, 589, 333, 845, 205, 717, 461, 973, 45, 557, 301, 813, 173, 685, 429, 941, 109, 621, 365, 877, 237, 749, 493, 1005, 29, 541, 285, 797, 157, 669, 413, 925, 93, 605, 349, 861, 221, 733, 477, 989, 61, 573, 317, 829, 189, 701, 445, 957, 125, 637, 381, 893, 253, 765, 509, 1021, 3, 515, 259, 771, 131, 643, 387, 899, 67, 579, 323, 835, 195, 707, 451, 963, 35, 547, 291, 803, 163, 675, 419, 931, 99, 611, 355, 867, 227, 739, 483, 995, 19, 531, 275, 787, 147, 659, 403, 915, 83, 595, 339, 851, 211, 723, 467, 979, 51, 563, 307, 819, 179, 691, 435, 947, 115, 627, 371, 883, 243, 755, 499, 1011, 11, 523, 267, 779, 139, 651, 395, 907, 75, 587, 331, 843, 203, 715, 459, 971, 43, 555, 299, 811, 171, 683, 427, 939, 107, 619, 363, 875, 235, 747, 491, 1003, 27, 539, 283, 795, 155, 667, 411, 923, 91, 603, 347, 859, 219, 731, 475, 987, 59, 571, 315, 827, 187, 699, 443, 955, 123, 635, 379, 891, 251, 763, 507, 1019, 7, 519, 263, 775, 135, 647, 391, 903, 71, 583, 327, 839, 199, 711, 455, 967, 39, 551, 295, 807, 167, 679, 423, 935, 103, 615, 359, 871, 231, 743, 487, 999, 23, 535, 279, 791, 151, 663, 407, 919, 87, 599, 343, 855, 215, 727, 471, 983, 55, 567, 311, 823, 183, 695, 439, 951, 119, 631, 375, 887, 247, 759, 503, 1015, 15, 527, 271, 783, 143, 655, 399, 911, 79, 591, 335, 847, 207, 719, 463, 975, 47, 559, 303, 815, 175, 687, 431, 943, 111, 623, 367, 879, 239, 751, 495, 1007, 31, 543, 287, 799, 159, 671, 415, 927, 95, 607, 351, 863, 223, 735, 479, 991, 63, 575, 319, 831, 191, 703, 447, 959, 127, 639, 383, 895, 255, 767, 511, 1023};

ulong ldn = 10;


Complex* CFFT::convolutionF(const Complex *input, const Complex *filter, long nSIG, long NFIL, long &NFFT)
{
    //Check for invalid inputs.
    if(input == NULL || filter == NULL)
    {
        cout << "Could not perform convolution on empty arrays!" << endl;
        return NULL;
    }
    
    bool NFFTChanged = false;
    //If NFFT not a power of 2, or it is smaller than signal or filter, prompt for new.
    while (log(NFFT) / log(2) != (int)(log(NFFT) / log(2)) || NFFT < nSIG || NFFT < NFIL)
    {
        cout << "Please input a valid NFFT, which is >= nSIG(" << nSIG << ") and >= NFIL(" << NFIL <<") : ";
        cin >> NFFT;
        NFFTChanged = true;
    }
    
    //Perform zero padding.
    Complex *fInput, *fFilter;
    
    fInput = new Complex[NFFT];
    for(int i = 0; i < nSIG; i++)
        fInput[i] = input[i];
    
    fFilter = new Complex[NFFT];
    for(int i = 0; i < NFIL; i++)
        fFilter[i] = filter[i];
    
    //Store the output data.
    Complex *output = new Complex[NFFT];
    
    //Perform FFT on both input and filter.
    CFFT::Forward(fInput, (unsigned int)NFFT);
    CFFT::Forward(fFilter, (unsigned int)NFFT);
    
    for(int i = 0; i < NFFT; i++)
        output[i] = fInput[i] * fFilter[i];
    
    return output;
}

//Convolution function which returns the time representation of the result.
//NFFT is the FFT size, nSIG is the size for the input, NFIL is the size of the filter.
Complex* CFFT::convolutionT(const Complex *input,const Complex *filter, long nSIG, long NFIL, long &NFFT)
{
    //Store the output data.
    Complex *output = convolutionF(input, filter, nSIG, NFIL, NFFT);
    
    //Perform IFFT on the ouput.
    CFFT::Inverse(output, (unsigned int)NFFT);
    
    return output;
}

Complex* CFFT::stereoConvMonoInputF(const Complex *input,const Complex *filterLeft,const Complex *filterRight, long nSIG, long NFILL, long NFILR, long &NFFT)
{
    Complex *result = stereoConvMonoInputT(input, filterLeft, filterRight, nSIG, NFILL, NFILR, NFFT);
    CFFT::Forward(result, (unsigned int)NFFT);
    return result;
}

//The size of the ouput will be 2 times of the size of FFT for the input signal and the NFFT value
//will be doubled after running the function
Complex* CFFT::stereoConvMonoInputT(const Complex *input,const Complex *filterLeft,const Complex *filterRight, long nSIG, long NFILL, long NFilR, long &NFFT)
{
    Complex *tempLeft = new Complex[NFFT];
    Complex *tempRight = new Complex[NFFT];
    Complex *result = new Complex[2*NFFT];
    
    tempLeft = CFFT::convolutionT(input, filterLeft, nSIG, NFILL, NFFT);
    tempRight = CFFT::convolutionT(input, filterRight, nSIG, NFILL, NFFT);
    NFFT = NFFT * 2;
    for (int i = 0; i < NFFT / 2; i++)
    {
        result[2 * i] = tempLeft[i];
        result[2 * i + 1] = tempRight[i];
    }
    
    delete tempLeft;
    delete tempRight;
    
    return result;
}

/*
 Complex* CFFT::stereoConvStereoInputT(const Complex *input, const Complex *filterLeft, const Complex *filterRight, long nSIG, long NFILL, long NFILR, long &NFFT)
 {
	NFFT = NFFT / 2;
	Complex *leftTemp = new Complex[NFFT];
	Complex *rightTemp = new Complex[NFFT];
 
	
 
	
 
	return 0;
 
 }
 
 */


//storing the an array into a text file
//filename is the file name you want to store the data into
//datatype represents the data you wanna store: real/real+imag/amplitude
void CFFT::storingData(Complex *data, int NFFT,string temp ,char datatype)
{
    //string temp= filename;
    ofstream outputFile(temp.c_str());
    if (outputFile.is_open())
    {
        switch (datatype)
        {
            case 'r':
                //ofstream outputFile("real.txt");
                for (int i = 0; i < NFFT; i++)
                    outputFile << data[i].real() << endl;
                break;
                
            case 'c':
                for (int i = 0; i < NFFT; i++)
                    outputFile << data[i].real() << "    " << data[i].imag() << endl;
                break;
            case 'a':
                for (int i = 0; i < NFFT; i++)
                    outputFile << sqrt(data[i].real()*data[i].real()+data[i].imag()*data[i].imag()) << endl;
                break;
        }
        outputFile.close();
    }
}



//   FORWARD FOURIER TRANSFORM
//     Input  - input data
//     Output - transform result
//     N      - length of both input data and result
bool CFFT::Forward(const Complex *const Input, Complex *const Output, const unsigned int N)
{
    //   Check input parameters
    if (!Input || !Output || N < 1 || N & (N - 1))
        return false;
    //   Initialize data
    Rearrange(Input, Output, N);
    //   Call FFT implementation
    Perform(Output, N);
    //   Succeeded
    return true;
}

//   FORWARD FOURIER TRANSFORM, INPLACE VERSION
//     Data - both input data and output
//     N    - length of input data
bool CFFT::Forward(Complex *const Data, const unsigned int N)
{
    //   Check input parameters
    if (!Data || N < 1 || N & (N - 1))
        return false;
    //   Rearrange
    Rearrange(Data, N);
    //   Call FFT implementation
    Perform(Data, N);
    //   Succeeded
    return true;
}

//   INVERSE FOURIER TRANSFORM
//     Input  - input data
//     Output - transform result
//     N      - length of both input data and result
//     Scale  - if to scale result
bool CFFT::Inverse(const Complex *const Input, Complex *const Output, const unsigned int N, const bool Scale /* = true */)
{
    //   Check input parameters
    if (!Input || !Output || N < 1 || N & (N - 1))
        return false;
    //   Initialize data
    Rearrange(Input, Output, N);
    //   Call FFT implementation
    Perform(Output, N, true);
    //   Scale if necessary
    if (Scale)
        CFFT::Scale(Output, N);
    //   Succeeded
    return true;
}

//   INVERSE FOURIER TRANSFORM, INPLACE VERSION
//     Data  - both input data and output
//     N     - length of both input data and result
//     Scale - if to scale result
bool CFFT::Inverse(Complex *const Data, const unsigned int N, const bool Scale /* = true */)
{
    //   Check input parameters
    if (!Data || N < 1 || N & (N - 1))
        return false;
    //   Rearrange
    Rearrange(Data, N);
    //   Call FFT implementation
    Perform(Data, N, true);
    //   Scale if necessary
    if (Scale)
        CFFT::Scale(Data, N);
    //   Succeeded
    return true;
}

//   Rearrange function
void CFFT::Rearrange(const Complex *const Input, Complex *const Output, const unsigned int N)
{
    //	//   Data entry position
    //	unsigned int Target = 0;
    //	//   Process all positions of input signal
    for (unsigned int Position = 0; Position < N; ++Position)
    {
        Output[Position] = Input[Position];
    }
}

//   Inplace version of rearrange function
void CFFT::Rearrange(Complex *const Data, const unsigned int N){}


//   FFT implementation
void CFFT::Perform(Complex *const Data, const unsigned int N, const bool Inverse /* = false */)
{

    if (Inverse) {
        // Inverse transform from Complex number to real number(Complex number with real part defined and imaginary part set to zero)  radix-4 decimation in Time method
        double dataReal [N];
        double dataImag [N];
        for (int i = 0; i < N; i++) {
            dataReal[i] = Data[PermutedIndex[i]].real();
            dataImag[i] = Data[PermutedIndex[i]].imag();
        }
        double *Kr = dataReal;
        double *Ki = dataImag;
        
        fft_dit4_core_p1(Kr, Ki, ldn);
        
        for (unsigned int Position = 0; Position < N; ++Position){
            Data[Position] = std::complex <double> (Kr[Position], 0);
        }
        
        
    }
    else{
        // forward transform from real number to Complex number using FHT method
        // first permute Data
        double *f = new double [N];
        for (int i = 0; i < N; i++) {
            f[i] = Data[PermutedIndex[i]].real();
        }
        // now tmpdata is the permuted version of Data
        fht_loc_dit2_core(f, ldn);
        /////////////  FHT to FFT conversion start ///////////////
        const ulong n = (1UL<<ldn);
        //int is = 1;
        //if ( is>0 )  for (ulong i=1, j=n-1;  i<j;  i++, j--)  sumdiff05(f[i], f[j]);
        //else         for (ulong i=1, j=n-1;  i<j;  i++, j--)  sumdiff05_r(f[i], f[j]);
        for (ulong i=1, j=n-1;  i<j;  i++, j--)  sumdiff05(f[i], f[j]);
        
        for (int i = 1; i<512; i++) {
            Complex tmp(f[i],-f[N-i]);
            Data[i] = tmp;
        }
        Data[512] = Complex(f[512],0);
        for (int i = 513; i<N; i++) {
            Complex tmp(f[N-i],f[i]);
            Data[i] = tmp;
        }
        Data[0] = Complex(f[0],0);
        delete f;
        /////////////  FHT to FFT conversion finished ///////////////
    }
    
}

//   Scaling of inverse FFT result
void CFFT::Scale(Complex *const Data, const unsigned int N)
{
    const double Factor = 1. / double(N);
    //   Scale all data entries
    for (unsigned int Position = 0; Position < N; ++Position)
        Data[Position] *= Factor;
}
